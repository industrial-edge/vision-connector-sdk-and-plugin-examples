variables:
  http_proxy: $CODE_PROXY
  https_proxy: $CODE_PROXY
  no_proxy: 127.0.0.1,localhost,docker,.siemens.de,.siemens.net,.siemens.com,.siemens.io,docker:2375,docker:2376,_service,163.242.13.10,163.242.13.4,141.29.104.110

  CI_DOCKER_AUTH: "\"$CI_REGISTRY\":{ \"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\" }"
  PACKAGE_ARCHIVE_LOCATION: sail_edge-dev-internal-generic/Vision_Connector
  ARTIFACTORY_AUTH: "\"$ARTIFACTORY_DOCKER_URL\":{ \"username\":\"$ARTIFACTORY_USER\",\"password\":\"$ARTIFACTORY_ACCESS_TOKEN\" }"
  DOCKER_AUTHS: "\"auths\": { $CI_DOCKER_AUTH, $ARTIFACTORY_AUTH }"
  DOCKER_PROXIES: "\"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"} }"

  CLEARED_DEBIAN_IMAGE: debian:bullseye-20221219-slim

stages:
  - build_img
  - test_driver
  - build_driver
  - publish_drivers

.common_rules:
  push_rule:
    - if: $CI_COMMIT_TAG == null
  publish_rule:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /.*-test.*/'

.package_version_config_template:
  - if [ "$CI_COMMIT_TAG" != "" ] ; then
      PACKAGE_TAG="$CI_COMMIT_TAG";
    else
      PACKAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA";
    fi

publish_drivers:
  stage: publish_drivers
  image: $CI_REGISTRY/siemens-ai-launcher-sail/ai-itest/ai-itest_environment/ai-itest_environment-ie:${SAIL_TEST_ENVIRONMENT_VERSION}
  script:
    - cd installed_drivers
    - find . -name "*.zip" -exec sh -c '/sail-ci-scripts/upload-file-to-artifactory.sh -f {} -r $PACKAGE_ARCHIVE_LOCATION' \;
  when: always
  rules:
    - !reference [.common_rules,publish_rule]

.kaniko_build:
  variables:
    KANIKO_CONFIG: "{${DOCKER_AUTHS}, ${DOCKER_PROXIES}}"
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/$COMPONENT_NAME:$TAG
    BASE_IMAGE_BUILDARGS: "--build-arg BASE_IMAGE=${DOCKER_BASE_IMAGE}"
    DOCKER_PROXY_BUILDARGS: "--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"
    DOCKERFILE_NAME: Dockerfile
    KANIKO_OPTIONAL_ARG: 
  image:
    name: gcr.io/kaniko-project/executor:v1.7.0-debug
    entrypoint: [""]
  script:
    - echo "${KANIKO_CONFIG}" > /kaniko/.docker/config.json
    - env
    - >-
      /kaniko/executor
      --context $DOCKERFILE_PATH
      --dockerfile $DOCKERFILE_PATH/$DOCKERFILE_NAME
      ${BASE_IMAGE_BUILDARGS}
      ${DOCKER_PROXY_BUILDARGS}
      --destination $DOCKER_IMAGE_NAME
      $KANIKO_OPTIONAL_ARG

build_driver_build_image:
  stage: build_img
  variables:
    COMPONENT_NAME: ie-vision-connector-driver-build-image
    TAG: '0.0.1'
    DOCKERFILE_PATH: $CI_PROJECT_DIR
    DOCKER_BASE_IMAGE: $CLEARED_DEBIAN_IMAGE
    KANIKO_OPTIONAL_ARG: --single-snapshot --target build
  extends: .kaniko_build

build_driver_test_image:
  stage: build_img
  variables:
    COMPONENT_NAME: ie-vision-connector-driver-test-image
    TAG: '0.0.1'
    DOCKERFILE_PATH: $CI_PROJECT_DIR
    DOCKER_BASE_IMAGE: $CLEARED_DEBIAN_IMAGE
    KANIKO_OPTIONAL_ARG: --single-snapshot --target test
  extends: .kaniko_build

.driver_test_base:
  stage: test_driver
  dependencies:
    - build_driver_test_image
  image: $CI_REGISTRY_IMAGE/ie-vision-connector-driver-test-image:0.0.1
  variables:
    DRIVER_NAME: ""
  script:
    - source /root/.bashrc
    - cmake --preset ${DRIVER_NAME,,}-tests
    - cmake --build --preset ${DRIVER_NAME,,}-tests-build
    - ctest --preset ${DRIVER_NAME,,}-tests --rerun-failed --output-on-failure

.driver_build_base:
  stage: build_driver
  image: $CI_REGISTRY_IMAGE/ie-vision-connector-driver-build-image:0.0.1
  variables:
    DRIVER_NAME: ""
  script:
    - !reference [.package_version_config_template]
    - source /root/.bashrc
    - cmake --preset ${DRIVER_NAME,,}-release
    - cmake --build --preset ${DRIVER_NAME,,}-release-build --target install
    - cd installed_drivers/${DRIVER_NAME,,}
    - zip -r ../${DRIVER_NAME,,}_${PACKAGE_TAG}.zip .
  artifacts:
    paths:
      - "installed_drivers/*.zip"

test_numbers_driver:
  extends: .driver_test_base
  variables:
    DRIVER_NAME: "numbers"

build_numbers_driver:
  extends: .driver_build_base
  needs:
    - test_numbers_driver
  variables:
    DRIVER_NAME: "numbers"

test_globbing_driver:
  extends: .driver_test_base
  variables:
    DRIVER_NAME: globbing

build_globbing_driver:
  extends: .driver_build_base
  needs:
    - test_globbing_driver
  variables:
    DRIVER_NAME: globbing

# test_daheng_driver:
#   extends: .driver_test_base
#   variables:
#     DRIVER_NAME: daheng

build_daheng_driver:
  extends: .driver_build_base
  # needs:
  #   - test_daheng_driver
  variables:
    DRIVER_NAME: daheng
